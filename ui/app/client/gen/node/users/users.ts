/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * My API
 * API documentation
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import { httpNode } from '../../../http-node';


  
  /**
 * @summary Get all users
 */
export const getApiV1Users = (
    
 ) => {
    return httpNode<void>(
    {url: `/api/v1/users`, method: 'GET'
    },
    );
  }



export const getGetApiV1UsersKey = () => [`/api/v1/users`] as const;

export type GetApiV1UsersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Users>>>
export type GetApiV1UsersQueryError = unknown

/**
 * @summary Get all users
 */
export const useGetApiV1Users = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiV1Users>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiV1UsersKey() : null);
  const swrFn = () => getApiV1Users()

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create a new user
 */
export const postApiV1Users = (
    
 ) => {
    return httpNode<void>(
    {url: `/api/v1/users`, method: 'POST'
    },
    );
  }



export const getPostApiV1UsersMutationFetcher = ( ) => {
  return (_: Key, __: { arg: Arguments }): Promise<void> => {
    return postApiV1Users();
  }
}
export const getPostApiV1UsersMutationKey = () => [`/api/v1/users`] as const;

export type PostApiV1UsersMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Users>>>
export type PostApiV1UsersMutationError = unknown

/**
 * @summary Create a new user
 */
export const usePostApiV1Users = <TError = unknown>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postApiV1Users>>, TError, Key, Arguments, Awaited<ReturnType<typeof postApiV1Users>>> & { swrKey?: string }, }
) => {

  const {swr: swrOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostApiV1UsersMutationKey();
  const swrFn = getPostApiV1UsersMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
